#!/bin/bash

# Prompt user to select report type
echo "Choose a report type:"
echo "1) Hourly (-h)"
echo "2) Daily (-d)"
echo "3) Monthly (-m)"
read -p "Enter the number (1-3): " choice

# Determine report type based on user input
case $choice in
    1) report_type="-h";;
    2) report_type="-d";;
    3) report_type="-m";;
    *) echo "Invalid choice."; exit 1;;
esac

# Get vnstat output based on selected report type
vnstat_output=$(vnstat $report_type)

# Extract relevant fields based on report type
case $report_type in
    -h)
        current_hour=$(date +"%H")
        line=$(echo "$vnstat_output" | grep "$current_hour:00")
        ;;
    -d)
        current_date=$(date +"%Y-%m-%d")
        line=$(echo "$vnstat_output" | grep "$current_date")
        ;;
    -m)
        current_month=$(date +"%Y-%m")
        line=$(echo "$vnstat_output" | grep "$current_month")
        ;;
esac

# Check if data is available for the selected period
if [ -z "$line" ]; then
  echo "No data available for the chosen period."
  exit 1
fi

# Extract received (rx) and transmitted (tx) values from the line
rx_value=$(echo $line | awk '{print $2, $3}')
tx_value=$(echo $line | awk '{print $5, $6}')

# Extract number and unit for received and transmitted values
rx_value_number=$(echo $rx_value | awk '{print $1}')
rx_value_unit=$(echo $rx_value | awk '{print $2}')
tx_value_number=$(echo $tx_value | awk '{print $1}')
tx_value_unit=$(echo $tx_value | awk '{print $2}')

# Convert units to bits for received and transmitted values
convert_to_bits() {
  local value_number=$1
  local value_unit=$2
  local value_in_bits

  if [[ $value_unit == "GiB" ]]; then
    value_in_bits=$(echo "$value_number * 1024 * 1024 * 1024 * 8" | bc)
  elif [[ $value_unit == "MiB" ]]; then
    value_in_bits=$(echo "$value_number * 1024 * 1024 * 8" | bc)
  elif [[ $value_unit == "KiB" ]]; then
    value_in_bits=$(echo "$value_number * 1024 * 8" | bc)
  else
    echo "Unknown unit: $value_unit"
    exit 1
  fi

  echo $value_in_bits
}

rx_in_bits=$(convert_to_bits $rx_value_number $rx_value_unit)
tx_in_bits=$(convert_to_bits $tx_value_number $tx_value_unit)

# Determine duration for rate calculation
if [[ $report_type == "-h" ]]; then
  duration=3600
elif [[ $report_type == "-d" ]]; then
  duration=$((24 * 3600))
elif [[ $report_type == "-m" ]]; then
  duration=$((30 * 24 * 3600))
fi

# Calculate receive and transmit rates in bits per second
rx_rate_bits=$(echo "$rx_in_bits / $duration" | bc -l)
tx_rate_bits=$(echo "$tx_in_bits / $duration" | bc -l)

# Function to convert rate to appropriate unit
display_rate() {
  local rate_bits=$1
  local rate
  local unit

  if (( $(echo "$rate_bits >= 1000000000" | bc -l) )); then
    rate=$(echo "$rate_bits / 1000000000" | bc -l)
    unit="Gbit/s"
  elif (( $(echo "$rate_bits >= 1000000" | bc -l) )); then
    rate=$(echo "$rate_bits / 1000000" | bc -l)
    unit="Mbit/s"
  elif (( $(echo "$rate_bits >= 1000" | bc -l) )); then
    rate=$(echo "$rate_bits / 1000" | bc -l)
    unit="Kbit/s"
  else
    rate=$rate_bits
    unit="bit/s"
  fi

  printf "%.2f %s" $rate $unit
}

# Display traffic usage and bandwidth rates in a professional table format
printf "\n+----------------------+--------------------+\n"
printf "| %-20s | %-18s |\n" "Traffic Usage" ""
printf "+----------------------+--------------------+\n"
printf "| %-20s | %-10s %s |\n" "Received:" "$rx_value_number" "$rx_value_unit"
printf "| %-20s | %-10s %s |\n" "Transmitted:" "$tx_value_number" "$tx_value_unit"
printf "+----------------------+--------------------+\n"

printf "\n+----------------------+--------------------+\n"
printf "| %-20s | %-18s |\n" "Bandwidth Rates" ""
printf "+----------------------+--------------------+\n"
printf "| %-20s | %-18s |\n" "Receive rate:" "$(display_rate $rx_rate_bits)"
printf "| %-20s | %-18s |\n" "Transmit rate:" "$(display_rate $tx_rate_bits)"
printf "+----------------------+--------------------+\n"
